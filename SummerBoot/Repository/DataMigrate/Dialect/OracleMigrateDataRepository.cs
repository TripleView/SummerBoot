using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using SummerBoot.Core;
using SummerBoot.Repository.ExpressionParser.Parser;

namespace SummerBoot.Repository.DataMigrate.Dialect;

public class OracleMigrateDataRepository: BaseMigrateDataRepository
{
    
    public OracleMigrateDataRepository(IUnitOfWork unitOfWork) : base(unitOfWork)
    {
        this.leftQuote = "\"";
        this.rightQuote = "\"";
    }

    /// <summary>
    /// Get the fully qualified name；获取完整限定名
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    private string GetTheFullyQualifiedName(string name)
    {
        return leftQuote + name + rightQuote;
    }

    public override async Task DisableForeignKeysAsync(List<string> tableNames)
    {
        foreach (var tableName in tableNames)
        {
            var fks = await GetForeignKeysAsync(tableName);
            foreach (var fk in fks)
            {
                var sql = $"ALTER TABLE {GetTheFullyQualifiedName(tableName)} DISABLE CONSTRAINT {GetTheFullyQualifiedName(fk)}";
                try
                {
                    await this.ExecuteAsync(sql);

                }
                catch (Exception e)
                {
                    throw new Exception($"execute sql error,sql is:{sql},error is :{e.Message}",e);
                }
                
            }
        }
    }

    private async Task<List<string>> GetForeignKeysAsync(string tableName)
    {
        var sql = @"SELECT constraint_name
                        FROM user_constraints
                        WHERE table_name = :tableName
                        AND constraint_type = 'R'";
        var fks = await this.QueryListAsync<string>(sql, new { tableName });
        return fks;
    }

    public override async Task EnableForeignKeysAsync(List<string> tableNames)
    {
        foreach (var tableName in tableNames)
        {
            var fks = await GetForeignKeysAsync(tableName);
            foreach (var fk in fks)
            {
                await this.ExecuteAsync($"ALTER TABLE {GetTheFullyQualifiedName(tableName)} ENABLE  CONSTRAINT {GetTheFullyQualifiedName(fk)}");
            }
        }
    }

    public override async Task MigratingDataWithAutoIncrementPrimaryKeyAsync<T>(Expression<Func<T, object>> selectKey, Func<Task> migrateAction)
    {
        var databaseUnit = dbFactory.DatabaseUnit;
        var tableName = "";
        var keyName = "";
        var newKeyName = "";
        if (selectKey.Body is UnaryExpression unaryExpression && unaryExpression.Operand is MemberExpression memberExpression)
        {
            var table = new TableExpression(memberExpression.Expression.Type);
            var column = table.Columns.FirstOrDefault(it => it.MemberInfo.Name == memberExpression.Member.Name);
            if (column != null)
            {
                if (column.IsKey && column.IsDatabaseGeneratedIdentity)
                {
                    tableName = table.Name;
                    if (databaseUnit.TableNameMapping != null)
                    {
                        tableName = databaseUnit.TableNameMapping(tableName);
                    }

                    tableName =GetTheFullyQualifiedName(tableName);
                    keyName = column.ColumnName;
                    if (databaseUnit.ColumnNameMapping != null)
                    {
                        keyName = databaseUnit.ColumnNameMapping(keyName);
                    }

                    newKeyName = GetTheFullyQualifiedName($"New{ keyName}"); 
                    keyName = GetTheFullyQualifiedName("keyName");
                }
                else
                {
                    throw new NotSupportedException("Can only be a primary key and auto-increment");
                }
            }
        }
        else
        {
            throw new NotSupportedException("selectKey not support,Can only be similar to it=>it.id");

        }

        await this.ExecuteAsync($"ALTER TABLE {tableName} MODIFY {keyName} DROP IDENTITY");
        await migrateAction();
        var maxId = await this.QueryFirstOrDefaultAsync<int?>($"select MAX({keyName})  from {tableName} f ");
        var count = await this.QueryFirstOrDefaultAsync<int?>($"select count({keyName})  from {tableName} f ");
        var startCount = 1;
        if (maxId.HasValue)
        {
            startCount = maxId.GetValueOrDefault(1) - count.GetValueOrDefault(0) + 1;
        }
        await this.ExecuteAsync($"ALTER TABLE {tableName} ADD  {newKeyName} NUMBER(10,0)   GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH {startCount} CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE");
        await this.ExecuteAsync($"UPDATE {tableName}   SET {newKeyName}={keyName} ");
        await this.ExecuteAsync($"ALTER TABLE {tableName} DROP COLUMN  {keyName} ");
        await this.ExecuteAsync($"ALTER TABLE {tableName} RENAME COLUMN {newKeyName} TO {keyName}");
    }

}