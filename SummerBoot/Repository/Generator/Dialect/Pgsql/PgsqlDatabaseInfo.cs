using SummerBoot.Core;
using SummerBoot.Repository.Generator.Dto;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SummerBoot.Repository.Core;

namespace SummerBoot.Repository.Generator.Dialect.SqlServer
{
    public class PgsqlDatabaseInfo : IDatabaseInfo
    {
        private readonly IDbFactory dbFactory;
        private readonly DatabaseUnit databaseUnit;
        public PgsqlDatabaseInfo(IDbFactory dbFactory)
        {
            this.dbFactory = dbFactory;
            this.databaseUnit = dbFactory.DatabaseUnit;
        }

        public GenerateDatabaseSqlResult CreateTable(DatabaseTableInfoDto tableInfo)
        {
            var tableName = tableInfo.Name;
            var fieldInfos = tableInfo.FieldInfos;
            var schemaTableName = GetSchemaTableName(tableInfo.Schema, tableName);
            var body = new StringBuilder();
            body.AppendLine($"CREATE TABLE {schemaTableName} (");
            //主键
            var keyField = "";
            var hasKeyField = fieldInfos.Any(it => it.IsKey);
            //数据库注释
            var databaseDescriptions = new List<string>();
            if (tableInfo.Description.HasText())
            {
                var tableDescriptionSql = CreateTableDescription(tableInfo.Schema, tableName, tableInfo.Description);
                databaseDescriptions.Add(tableDescriptionSql);
            }

            for (int i = 0; i < fieldInfos.Count; i++)
            {
                var fieldInfo = fieldInfos[i];

                //行末尾是否有逗号
                var lastComma = "";
                if (i != fieldInfos.Count - 1)
                {
                    lastComma = ",";
                }
                else
                {
                    lastComma = hasKeyField ? "," : "";
                }

                body.AppendLine($"    {GetCreateFieldSqlByFieldInfo(fieldInfo, false)}{lastComma}");
                if (fieldInfo.IsKey)
                {
                    keyField = fieldInfo.ColumnName;
                }

                //添加行注释
                if (fieldInfo.Description.HasText())
                {
                    var tableFieldDescription = CreateTableFieldDescription(tableInfo.Schema, tableName, fieldInfo);
                    databaseDescriptions.Add(tableFieldDescription);
                }
            }

            if (keyField.HasText())
            {
                body.AppendLine($" CONSTRAINT {tableName}_pk PRIMARY KEY ({keyField})");
            }

            body.AppendLine($")");


            var result = new GenerateDatabaseSqlResult()
            {
                Body = body.ToString(),
                Descriptions = databaseDescriptions,
                FieldModifySqls = new List<string>()
            };

            return result;
        }

        /// <summary>
        /// 通过字段信息生成生成表的sql
        /// </summary>
        /// <param name="fieldInfo"></param>
        /// <param name="isAlert"></param>
        /// <returns></returns>
        private string GetCreateFieldSqlByFieldInfo(DatabaseFieldInfoDto fieldInfo, bool isAlter)
        {
            var identityString = fieldInfo.IsAutoCreate && fieldInfo.IsKey ? "GENERATED BY DEFAULT AS IDENTITY" : "";
            var nullableString = fieldInfo.IsNullable ? "NULL" : "NOT NULL";
            
            var columnDataType = fieldInfo.ColumnDataType;


            //string类型默认长度max，也可自定义
            if (fieldInfo.ColumnDataType == "text")
            {
                columnDataType = fieldInfo.StringMaxLength.HasValue && fieldInfo.StringMaxLength.Value != int.MaxValue
                    ? $"varchar({fieldInfo.StringMaxLength.Value})"
                    : $"text";
            }

            //自定义decimal精度类型
            if (fieldInfo.ColumnDataType == "numeric")
            {
                columnDataType =
                    $"numeric({fieldInfo.Precision},{fieldInfo.Scale})";
            }

            if (fieldInfo.SpecifiedColumnDataType.HasText())
            {
                columnDataType = fieldInfo.SpecifiedColumnDataType;
            }

            var columnName = BoxTableNameOrColumnName(fieldInfo.ColumnName);
            var result = $"{columnName} {columnDataType} {nullableString} {identityString}";
            return result;
        }

        public string CreateTableDescription(string schema, string tableName, string description)
        {
            var schemaTableName = GetSchemaTableName(schema, tableName);
            var sql = $"COMMENT ON TABLE {schemaTableName} IS '{description}'";
            return sql;
        }


        public string UpdateTableDescription(string schema, string tableName, string description)
        {
            return CreateTableDescription(schema, tableName, description);
        }

        public string CreateTableField(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
        {
            var schemaTableName = GetSchemaTableName(schema, tableName);
            var sql = $"ALTER TABLE {schemaTableName} ADD {GetCreateFieldSqlByFieldInfo(fieldInfo, true)}";
            //var sql = $"COMMENT ON COLUMN public.customer."name" IS 'fff';";
            return sql;
        }

        public string CreateTableFieldDescription(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
        {
            var schemaTableName = GetSchemaTableName(schema, tableName);
            var sql = $"COMMENT ON COLUMN {schemaTableName}.\"{fieldInfo.ColumnName}\" IS '{fieldInfo.Description}'";
            return sql;
        }

        public DatabaseTableInfoDto GetTableInfoByName(string schema, string tableName)
        {
            var dbConnection = dbFactory.GetDbConnection();
            schema = GetDefaultSchema(schema);
            var sql = @"select
	                    col.column_name as ColumnName,
                    concat_ws('', t.typname) as ColumnDataType,
                    (case when col.is_nullable = 'YES' then 1 else 0 end) as IsNullable,
	                    (case
		                    when (
		                    select
			                    count(pg_constraint.*)
		                    from
			                    pg_constraint
		                    inner join pg_class on
			                    pg_constraint.conrelid = pg_class.oid
		                    inner join pg_attribute on
			                    pg_attribute.attrelid = pg_class.oid
			                    and pg_attribute.attnum = any(pg_constraint.conkey)
		                    inner join pg_type on
			                    pg_type.oid = pg_attribute.atttypid
		                    where
			                    pg_class.relname = c.relname
			                    and pg_constraint.contype = 'p'
			                    and pg_attribute.attname = a.attname) > 0 then 1
		                    else 0 end) as IsKey,
	                    
	                    (case
		                    when a.attlen > 0 then a.attlen
		                    when t.typname='bit' then a.atttypmod
		                    else a.atttypmod - 4 end) as 长度,
	                    (case when col.is_identity = 'YES' then 1 else 0 end) as IsAutoCreate,
	                     col.column_default	as 默认值,
	                    (select description from pg_description where objoid = a.attrelid
	                    and objsubid = a.attnum) as Description
                    from
	                    pg_class c,
	                    pg_attribute a ,
	                    pg_type t,
	                    information_schema.columns as col
                    where
	                    c.relname = @tableName
	                    and col.table_schema = @schemaName
	                    and a.attnum>0
	                    and a.attrelid = c.oid
	                    and a.atttypid = t.oid
	                    and col.table_name=c.relname and col.column_name=a.attname
                    order by
	                    c.relname desc,
	                    a.attnum asc";
            var fieldInfos = dbConnection.Query<DatabaseFieldInfoDto>(databaseUnit,sql, new { tableName, schemaName=schema }).ToList();

            var tableDescriptionSql = @"select 
                                        cast(obj_description(relfilenode,'pg_class') as varchar) as TABLE_COMMENT 
                                        from pg_class c 
                                        join information_schema.columns col on c.relname =col.table_name
                                        where
                                        col.table_schema =@schemaName
                                        and col.table_name = @tableName";

            var tableDescription = dbConnection.QueryFirstOrDefault<string>(databaseUnit, tableDescriptionSql, new { tableName, schemaName = schema });

            var result = new DatabaseTableInfoDto()
            {
                Name = tableName,
                Description = tableDescription,
                FieldInfos = fieldInfos
            };

            return result;
        }

        public string CreatePrimaryKey(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
        {
            //var schemaTableName = GetSchemaTableName(schema, tableName);
            //var sql =
            //    $"ALTER TABLE {schemaTableName} ADD CONSTRAINT {tableName}_PK PRIMARY KEY({BoxTableNameOrColumnName(fieldInfo.ColumnName)})";

            //return sql;
            return "";
        }

        public string BoxTableNameOrColumnName(string tableNameOrColumnName)
        {
            return "\"" + tableNameOrColumnName + "\"";
        }

        public string GetSchemaTableName(string schema, string tableName)
        {
            tableName = BoxTableNameOrColumnName(tableName);
            tableName = schema.HasText() ? schema + "." + tableName : tableName;
            return tableName;
        }

        public string GetDefaultSchema(string schema)
        {
            if (schema.HasText())
            {
                return schema;
            }

            return "public";
        }
    }
}